============================== Step 2 ==============================
Кучи -- очереди (первый зашел - первый вышел) и кучи с приоритетами
(первый зашел -- вышел первый тот, у кого необходимый приоритет)

============================== Step 3 ==============================
Приоритетные очереди

insert(p) добавляет элемент с приоритетом p
remove(it) удаляет элемент, на который указывает итератор it
getmin() возвращает элемент с минимальным приоритетом
extractmin() извлекает элемент с минимальным приоритетом
changepriority(it, p) изменяет приоритет элеента, на который указывает
итератор it, на p

n - # элементов
O(log n)

============================== Step 5 ==============================
Двоичная куча (Binary Heap)

siftup (всплытие более легкого элемента вверх по двоичному дереву при
добавлении этого элемента к листу дерева) - время работа O(h), где h -
высота дерева

============================== Step 6 ==============================
Извлечение минимума (найти и вытащить из дерева) и просеивание (sift
down)

Время работы O(h), где h - высота дерева

============================== Step 10 ==============================
Почти полное бинарное дерево и массив

Высота его O(log n)

Чтобы узнать индексы левого и правого ребенка элемента i:
left(i) = 2i
right(i) = 2i + 1

Найти индекс родителя:
parent(i) = [i / 2] (делим пополам и округляем вниз)

Каждый раз при вычислении такоо индекса надо проверять, попал ли он в
отрезо [1, n] (потому что, например, у листьев нет детей)

Поэтому такое дерево можно хранить в виде массива
Все операции работают за O(log n), а getmin за константу

============================== Step 11 ==============================

Тест. Является ли двоичной кучей массив
A[1…11]=[2,10,3,14,20,5,6,18,11,27,21]?

Ответ: неа

============================== Step 12 ==============================

Задача на программирование. Данная задача состоит в реализации
двоичной кучи. В первой строке ввода задаётся число n (1≤n≤105), далее
n строк вида Insert X, где X — натуральное число, не превосходящее
109, или Extract. Первая операция должна добавлять в кучу число X,
вторая должна извлекать максимум из кучи и выводить его в очередной
строке вывода.

Сроки сдачи задания:  

Soft дедлайн 13.10.2014 23:59 MSK 

Hard дедлайн 20.10.2014 23:59 MSK


Sample Input:
6
Insert 100
Insert 10
Extract
Insert 5
Insert 50
Extract

Sample Output:
100
50

Memory Limit: 256 MB
Time Limit: 5 seconds

Source: heap.py

============================== Step 13 ==============================
Тест. Рассмотрим кучу, являющуюся почти полным d-ичным деревом (у
каждой вершины не более d детей, заполнены все уровни, кроме, быть
может, последнего). Как изменится время работы операций SiftDown и
SiftUp? Отметьте все верные утверждения. (Пояснение: в оценках ниже
встречается множитель d, поскольку в общем случае d может быть и не
константным, а зависящим от n.)


Ответ: 
* время работы SiftDown станет равным Θ(d log_d n) 
* время работы SiftUp станет равным Θ(log_d n)
