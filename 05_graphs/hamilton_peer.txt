Для проверки наличия гамильтонова пути в ориентированном ациклическом графе нам понадобится уже знакомый алгоритм топологической сортировки toposort.

Тогда алгоритм проверки существования гамильтонова пути можно записать так:

функция hamilton_path_exists(G):
{Вход: ориентированный ацикличный граф G = (V , E).}
{Выход: Истина, если путь существует; Ложь, если путь отсутствует}
sorted <- toposort(G)
для i от 1 до (sorted.размер - 1):
  если G.E[sorted[i]] содержит sorted[i + 1]:
    продолжаем цикл
  иначе:
    вернуть Ложь
вернуть Истина

То есть предложенный алгоритм:
1) Сортирует входной граф за время O(|V|+|E|) (доказательство см. в лекциях).
2) В цикле от первой до предпоследней вершины в массиве отсортированного графа проверяет, соединена ли текущая вершина с последующей вершиной ребром в оригинальном графе. На это уйдет время O(|V|).
3) Если хотя бы в одной паре идущих друг за другом в отсортированном массиве вершин нет ребра, то гамильтонова пути в заданном графе нет. Иначе цикл отработает полностью и программа вернет истину (то есть гамильтон путь найден -- им является путь между вершинами, возвращаемыми toposort).

Отсюда следует, что время работы алгоритма равно O(|V|+|E|), то есть является линейным $\blacksquare$
