============================== Step 2 ==============================
Обход вершин, достижимых из данной 

процедура Explore(v)
{Вход: вершина v графа G = (V , E ).}
{Выход: visited[u] = true для всех вершин u, достижимых из v.}
visited[v] ← true
для каждого ребра (v,u) ∈ E:
  если visited[u] = false: 
    Explore(u)

============================== Step4 ==============================
Поиск в глубину (Depth First Search)

процедура DFS(G)
для всех вершин v ∈ V :
  visited[v] ← false
для всех вершин v ∈ V : 
  если visited[v] = false:
    Explore(v)

Время работы O(|V| + |E|) - линейное время для графа

============================== Step 5 ==============================
Задача на программирование. Дан неориентированный граф в следующем
стандартном формате. Первая строка содержит два числа n и m
(1≤n,m≤1000) — количества вершин и рёбер в графе. Следующие m строк
содержат описания ребер — номера вершин, соединенных ребром. Вершины
нумеруются от 1 до n. Последняя строка содержит пару чисел u и v —
номера вершин. Если из u достижима v (другими словами, u и v лежат в
одной компоненте связности), необходимо вывести 1, иначе — 0.

Sample Input:
4 3
1 2
3 2
4 3
1 4

Sample Output:
1

Source: explore.py

============================== Step 6 ==============================
Ребро дерева -- это такое ребро, при переходу по которому обнаружилось новая вершина

Обратное реббро -- это ребро, по которому приходим к вершине, в которой мы уже были

Найдем количество компонент связностей в графе

процедура DFS(G)
для всех вершин v ∈ V :
  visited[v] ← false

ccnum = 1 # connected component number, номер связанной компоненты
для всех вершин v ∈ V : 
  если visited[v] = false:
    Explore(v)
  ccnum += 1

изменения в процедуре эксплор:

процедура Explore(v):
cc[v] = ccnum # 
  
============================== Step 7 ==============================
Задача на программирование. Дан неориентированный граф, содержащий n
вершин и m рёбер (1≤n≤1000, 0≤m≤1000). Необходимо вывести количество
компонент связности в заданном графе.

Sample Input:
4 2
1 2
3 2

Sample Output:
2

Source: dfs.py и unordered_cc.py (верный вариант)
